// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Qydha.Infrastructure;

#nullable disable

namespace Qydha.Api.Migrations
{
    [DbContext(typeof(QydhaContext))]
    [Migration("20240630223402_AddRolesToUserAndRemoveUnNecessaryColumns")]
    partial class AddRolesToUserAndRemoveUnNecessaryColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Qydha.Domain.Entities.AdminUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("NormalizedUsername")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("normalized_username");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("character varying(25)")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("admins_pkey");

                    b.HasIndex(new[] { "NormalizedUsername" }, "admins_normalized_username_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "admins_username_key")
                        .IsUnique();

                    b.ToTable("admins", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2705466-4304-4830-b48a-3e44e031927e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NormalizedUsername = "ADMIN",
                            PasswordHash = "$2a$11$V0A5.EYwXlFUjK3RIis3...A9rfzUm.mO.88MUYW9.uHSZLjURNsC",
                            Role = "SuperAdmin",
                            Username = "Admin"
                        });
                });

            modelBuilder.Entity("Qydha.Domain.Entities.AppAsset", b =>
                {
                    b.Property<string>("AssetKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("asset_key");

                    b.Property<string>("AssetData")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("asset_data");

                    b.HasKey("AssetKey")
                        .HasName("app_assets_pkey");

                    b.ToTable("app_assets", (string)null);

                    b.HasData(
                        new
                        {
                            AssetKey = "baloot_book",
                            AssetData = "{}"
                        },
                        new
                        {
                            AssetKey = "popup",
                            AssetData = "{}"
                        });
                });

            modelBuilder.Entity("Qydha.Domain.Entities.BalootGame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("EndedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended_at");

                    b.Property<string>("EventsJsonString")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("game_events")
                        .HasDefaultValueSql("'[]'::jsonb");

                    b.Property<string>("GameMode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("game_mode");

                    b.Property<Point>("Location")
                        .HasColumnType("geometry(Point, 4326)");

                    b.Property<short>("MaxSakkaPerGame")
                        .HasColumnType("smallint")
                        .HasColumnName("max_sakka_per_game");

                    b.Property<Guid>("ModeratorId")
                        .HasColumnType("uuid")
                        .HasColumnName("moderator_id");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<string>("PausingIntervals")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("pausing_intervals")
                        .HasDefaultValueSql("'[]'::jsonb");

                    b.Property<DateTimeOffset?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<int>("ThemGameScore")
                        .HasColumnType("integer")
                        .HasColumnName("them_game_score");

                    b.Property<string>("ThemName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("them_name");

                    b.Property<int>("UsGameScore")
                        .HasColumnType("integer")
                        .HasColumnName("us_game_score");

                    b.Property<string>("UsName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("us_name");

                    b.Property<string>("Winner")
                        .HasColumnType("text")
                        .HasColumnName("winner");

                    b.HasKey("Id");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("OwnerId");

                    b.ToTable("baloot_games", (string)null);
                });

            modelBuilder.Entity("Qydha.Domain.Entities.BalootMoshtara", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BalootSakkaId")
                        .HasColumnType("integer")
                        .HasColumnName("baloot_sakka_id");

                    b.Property<string>("Data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<DateTimeOffset?>("EndedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended_at");

                    b.Property<string>("PausingIntervals")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("pausing_intervals")
                        .HasDefaultValueSql("'[]'::jsonb");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<int>("ThemScore")
                        .HasColumnType("integer")
                        .HasColumnName("them_score");

                    b.Property<int>("UsScore")
                        .HasColumnType("integer")
                        .HasColumnName("us_score");

                    b.HasKey("Id");

                    b.HasIndex("BalootSakkaId");

                    b.ToTable("baloot_moshtaras", (string)null);
                });

            modelBuilder.Entity("Qydha.Domain.Entities.BalootSakka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("BalootGameId")
                        .HasColumnType("uuid")
                        .HasColumnName("baloot_game_id");

                    b.Property<string>("DrawHandler")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("draw_handler");

                    b.Property<DateTimeOffset?>("EndedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("ended_at");

                    b.Property<bool>("IsMashdoda")
                        .HasColumnType("boolean")
                        .HasColumnName("is_mashdoda");

                    b.Property<string>("PausingIntervals")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("pausing_intervals")
                        .HasDefaultValueSql("'[]'::jsonb");

                    b.Property<DateTimeOffset>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("StateName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<int>("ThemScore")
                        .HasColumnType("integer")
                        .HasColumnName("them_score");

                    b.Property<int>("UsScore")
                        .HasColumnType("integer")
                        .HasColumnName("us_score");

                    b.Property<string>("Winner")
                        .HasColumnType("text")
                        .HasColumnName("winner");

                    b.HasKey("Id");

                    b.HasIndex("BalootGameId");

                    b.ToTable("baloot_sakkas", (string)null);
                });

            modelBuilder.Entity("Qydha.Domain.Entities.InfluencerCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("category_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("ExpireAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expire_at");

                    b.Property<int>("MaxInfluencedUsersCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("max_influenced_users_count");

                    b.Property<string>("NormalizedCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("normalized_code");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_days");

                    b.HasKey("Id")
                        .HasName("influencer_codes_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex(new[] { "Code" }, "influencer_codes_code_key")
                        .IsUnique();

                    b.HasIndex(new[] { "NormalizedCode" }, "influencer_codes_normalized_code_key")
                        .IsUnique();

                    b.ToTable("influencer_codes", (string)null);
                });

            modelBuilder.Entity("Qydha.Domain.Entities.InfluencerCodeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("category_name");

                    b.Property<int>("MaxCodesPerUserInGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("max_codes_per_user_in_group");

                    b.HasKey("Id")
                        .HasName("influencer_codes_categories_pkey");

                    b.HasIndex(new[] { "CategoryName" }, "influencer_codes_categories_category_name_key")
                        .IsUnique();

                    b.ToTable("influencer_codes_categories", (string)null);
                });

            modelBuilder.Entity("Qydha.Domain.Entities.InfluencerCodeUserLink", b =>
                {
                    b.Property<Guid>("InfluencerCodeId")
                        .HasColumnType("uuid")
                        .HasColumnName("influencer_code_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_days");

                    b.Property<DateTimeOffset>("UsedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("used_at");

                    b.HasKey("InfluencerCodeId", "UserId")
                        .HasName("influencer_code_users_link_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("influencer_code_users_link", (string)null);
                });

            modelBuilder.Entity("Qydha.Domain.Entities.LoginWithQydhaRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Otp")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("otp");

                    b.Property<DateTimeOffset?>("UsedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("used_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("login_with_qydha_requests_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("login_with_qydha_requests", (string)null);
                });

            modelBuilder.Entity("Qydha.Domain.Entities.NotificationData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionPath")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("character varying(350)")
                        .HasColumnName("action_path");

                    b.Property<int>("ActionType")
                        .HasColumnType("integer")
                        .HasColumnName("action_type");

                    b.Property<int>("AnonymousClicks")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("anonymous_clicks");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("description");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload")
                        .HasDefaultValueSql("'{}'::jsonb");

                    b.Property<string>("SendingMechanism")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sending_mechanism");

                    b.Property<string>("TemplateValues")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("template_values")
                        .HasDefaultValueSql("'{}'::jsonb");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<string>("Visibility")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("visibility");

                    b.HasKey("Id")
                        .HasName("notifications_data_pkey");

                    b.ToTable("notifications_data", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActionPath = "_",
                            ActionType = 1,
                            AnonymousClicks = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "نتمنى لك تجربة جميلة، ارسلنا لك هدية بقسم المتجر 😉",
                            Payload = "{\"Image\":null}",
                            SendingMechanism = "Automatic",
                            TemplateValues = "{}",
                            Title = "مرحباً بك في قيدها ♥",
                            Visibility = "Private"
                        },
                        new
                        {
                            Id = 2,
                            ActionPath = "_",
                            ActionType = 1,
                            AnonymousClicks = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "نتمنى لك تجربة جميلة، لا تنسى قيدها ليس مجرد حاسبة",
                            Payload = "{\"Image\":null}",
                            SendingMechanism = "Automatic",
                            TemplateValues = "{}",
                            Title = "شكرا لثقتك بقيدها..",
                            Visibility = "Private"
                        },
                        new
                        {
                            Id = 3,
                            ActionPath = "_",
                            ActionType = 1,
                            AnonymousClicks = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "شيك على المتجر .. تتهنى ♥",
                            Payload = "{\"Image\":null}",
                            SendingMechanism = "Automatic",
                            TemplateValues = "{}",
                            Title = "وصلتك هدية.. 🎁",
                            Visibility = "Private"
                        },
                        new
                        {
                            Id = 4,
                            ActionPath = "_",
                            ActionType = 1,
                            AnonymousClicks = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "نتمنى لك تجربة ممتعة ♥",
                            Payload = "{\"Image\":null}",
                            SendingMechanism = "Automatic",
                            TemplateValues = "{}",
                            Title = "تستاهل ما جاك",
                            Visibility = "Private"
                        },
                        new
                        {
                            Id = 5,
                            ActionPath = "_",
                            ActionType = 1,
                            AnonymousClicks = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "إذا عجبك التطبيق لا تنسى تنشره بين أخوياك",
                            Payload = "{\"Image\":null}",
                            SendingMechanism = "Automatic",
                            TemplateValues = "{}",
                            Title = "تم تفعيل الكود",
                            Visibility = "Private"
                        },
                        new
                        {
                            Id = 6,
                            ActionPath = "_",
                            ActionType = 1,
                            AnonymousClicks = 0,
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            Description = "رمز الدخول هو {Otp} تستطيع استخدامه لتسجيل الدخول على {ServiceName} باستخدام حسابك بتطبيق قيدها",
                            Payload = "{\"Image\":null}",
                            SendingMechanism = "Automatic",
                            TemplateValues = "{}",
                            Title = "تسجيل دخول الى {ServiceName}",
                            Visibility = "Private"
                        });
                });

            modelBuilder.Entity("Qydha.Domain.Entities.NotificationUserLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("NotificationId")
                        .HasColumnType("integer")
                        .HasColumnName("notification_id");

                    b.Property<DateTimeOffset?>("ReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at");

                    b.Property<DateTimeOffset>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<string>("TemplateValues")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasColumnName("template_values")
                        .HasDefaultValueSql("'{}'::jsonb");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("notifications_users_link_pkey");

                    b.HasIndex("NotificationId");

                    b.HasIndex("UserId");

                    b.ToTable("notifications_users_link", (string)null);
                });

            modelBuilder.Entity("Qydha.Domain.Entities.PhoneAuthenticationRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Otp")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("otp");

                    b.Property<string>("SentBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("phone_authentication_requests_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("phone_authentication_requests", (string)null);
                });

            modelBuilder.Entity("Qydha.Domain.Entities.Purchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("IAPHubPurchaseId")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("iaphub_purchase_id");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_days");

                    b.Property<string>("ProductSku")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("productsku");

                    b.Property<DateTimeOffset>("PurchaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("purchase_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("type");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("purchases_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("purchases", (string)null);
                });

            modelBuilder.Entity("Qydha.Domain.Entities.RegistrationOTPRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("FCMToken")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("fcm_token");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("otp");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("phone");

                    b.Property<string>("SentBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("registration_otp_request_pkey");

                    b.ToTable("registration_otp_request", (string)null);
                });

            modelBuilder.Entity("Qydha.Domain.Entities.UpdateEmailRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("otp");

                    b.Property<string>("SentBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("update_email_requests_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("update_email_requests", (string)null);
                });

            modelBuilder.Entity("Qydha.Domain.Entities.UpdatePhoneRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasColumnName("otp");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("phone");

                    b.Property<string>("SentBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("UsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("update_phone_requests_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("update_phone_requests", (string)null);
                });

            modelBuilder.Entity("Qydha.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AvatarPath")
                        .HasColumnType("character varying")
                        .HasColumnName("avatar_path");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("character varying")
                        .HasColumnName("avatar_url");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("DATE")
                        .HasColumnName("birth_date");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_on");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("email");

                    b.Property<DateTimeOffset?>("ExpireDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expire_date");

                    b.Property<string>("FCMToken")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("fcm_token");

                    b.Property<DateTimeOffset?>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("normalized_email")
                        .HasComputedColumnSql("UPPER(email)", true);

                    b.Property<string>("NormalizedUsername")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("normalized_username")
                        .HasComputedColumnSql("UPPER(username)", true);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("phone");

                    b.Property<int[]>("Roles")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "Email" }, "users_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "NormalizedEmail" }, "users_normalized_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "NormalizedUsername" }, "users_normalized_username_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Phone" }, "users_phone_key")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "users_username_key")
                        .IsUnique();

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2705466-4304-4830-b48a-3e44e031927e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, 0, 0, 0, 0)),
                            NormalizedUsername = "ADMIN",
                            PasswordHash = "$2a$11$V0A5.EYwXlFUjK3RIis3...A9rfzUm.mO.88MUYW9.uHSZLjURNsC",
                            Phone = "+201555330346",
                            Roles = new[] { 1 },
                            Username = "Admin"
                        });
                });

            modelBuilder.Entity("Qydha.Domain.Entities.UserPromoCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset>("ExpireAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expire_at");

                    b.Property<int>("NumberOfDays")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_days");

                    b.Property<DateTimeOffset?>("UsedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("used_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("user_promo_codes_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("user_promo_codes", (string)null);
                });

            modelBuilder.Entity("Qydha.Domain.Entities.BalootGame", b =>
                {
                    b.HasOne("Qydha.Domain.Entities.User", "Moderator")
                        .WithMany("ModeratedBalootGames")
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_moderator_baloot_games_link");

                    b.HasOne("Qydha.Domain.Entities.User", "Owner")
                        .WithMany("CreatedBalootGames")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_owner_baloot_games_link");

                    b.Navigation("Moderator");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Qydha.Domain.Entities.BalootMoshtara", b =>
                {
                    b.HasOne("Qydha.Domain.Entities.BalootSakka", null)
                        .WithMany("Moshtaras")
                        .HasForeignKey("BalootSakkaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Qydha.Domain.Entities.BalootSakka", b =>
                {
                    b.HasOne("Qydha.Domain.Entities.BalootGame", null)
                        .WithMany("Sakkas")
                        .HasForeignKey("BalootGameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Qydha.Domain.Entities.InfluencerCode", b =>
                {
                    b.HasOne("Qydha.Domain.Entities.InfluencerCodeCategory", "Category")
                        .WithMany("InfluencerCodes")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_influencer_code_categories");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Qydha.Domain.Entities.InfluencerCodeUserLink", b =>
                {
                    b.HasOne("Qydha.Domain.Entities.InfluencerCode", "InfluencerCode")
                        .WithMany("Users")
                        .HasForeignKey("InfluencerCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_influencer_code_at_influencer_code_link_table");

                    b.HasOne("Qydha.Domain.Entities.User", "User")
                        .WithMany("InfluencerCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_at_influencer_code_user_link_table");

                    b.Navigation("InfluencerCode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Qydha.Domain.Entities.LoginWithQydhaRequest", b =>
                {
                    b.HasOne("Qydha.Domain.Entities.User", "User")
                        .WithMany("LoginWithQydhaRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Qydha.Domain.Entities.NotificationUserLink", b =>
                {
                    b.HasOne("Qydha.Domain.Entities.NotificationData", "Notification")
                        .WithMany("NotificationUserLinks")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_at_notification_link_table");

                    b.HasOne("Qydha.Domain.Entities.User", "User")
                        .WithMany("NotificationUserLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_at_notification_link_table");

                    b.Navigation("Notification");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Qydha.Domain.Entities.PhoneAuthenticationRequest", b =>
                {
                    b.HasOne("Qydha.Domain.Entities.User", null)
                        .WithMany("PhoneAuthenticationRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Qydha.Domain.Entities.Purchase", b =>
                {
                    b.HasOne("Qydha.Domain.Entities.User", "User")
                        .WithMany("Purchases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Qydha.Domain.Entities.UpdateEmailRequest", b =>
                {
                    b.HasOne("Qydha.Domain.Entities.User", null)
                        .WithMany("UpdateEmailRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Qydha.Domain.Entities.UpdatePhoneRequest", b =>
                {
                    b.HasOne("Qydha.Domain.Entities.User", null)
                        .WithMany("UpdatePhoneRequests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Qydha.Domain.Entities.User", b =>
                {
                    b.OwnsOne("Qydha.Domain.Entities.UserBalootSettings", "UserBalootSettings", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("user_id");

                            b1.Property<bool>("IsAdvancedRecording")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("boolean")
                                .HasDefaultValue(false)
                                .HasColumnName("is_advanced_recording");

                            b1.Property<bool>("IsAklatShown")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("boolean")
                                .HasDefaultValue(false)
                                .HasColumnName("is_aklat_shown");

                            b1.Property<bool>("IsCommentsSoundEnabled")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("boolean")
                                .HasDefaultValue(true)
                                .HasColumnName("is_comments_sound_enabled");

                            b1.Property<bool>("IsEkakShown")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("boolean")
                                .HasDefaultValue(false)
                                .HasColumnName("is_ekak_shown");

                            b1.Property<bool>("IsFlipped")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("boolean")
                                .HasDefaultValue(false)
                                .HasColumnName("is_flipped");

                            b1.Property<bool>("IsNumbersSoundEnabled")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("boolean")
                                .HasDefaultValue(true)
                                .HasColumnName("is_numbers_sound_enabled");

                            b1.Property<bool>("IsSakkahMashdodahMode")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("boolean")
                                .HasDefaultValue(false)
                                .HasColumnName("is_sakkah_mashdodah_mode");

                            b1.Property<int>("SakkasCount")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(1)
                                .HasColumnName("sakkas_count");

                            b1.Property<bool>("ShowWhoWonDialogOnDraw")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("boolean")
                                .HasDefaultValue(false)
                                .HasColumnName("show_who_won_dialog_on_draw");

                            b1.HasKey("UserId");

                            b1.ToTable("user_baloot_settings", (string)null);

                            b1.WithOwner("User")
                                .HasForeignKey("UserId");

                            b1.Navigation("User");
                        });

                    b.OwnsOne("Qydha.Domain.Entities.UserGeneralSettings", "UserGeneralSettings", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("user_id");

                            b1.Property<bool>("EnableVibration")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("boolean")
                                .HasDefaultValue(true)
                                .HasColumnName("enable_vibration");

                            b1.Property<string>("PlayersNames")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("jsonb")
                                .HasColumnName("players_names")
                                .HasDefaultValueSql("'[]'::jsonb");

                            b1.Property<string>("TeamsNames")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasColumnType("jsonb")
                                .HasColumnName("teams_names")
                                .HasDefaultValueSql("'[]'::jsonb");

                            b1.HasKey("UserId");

                            b1.ToTable("user_general_settings", (string)null);

                            b1.WithOwner("User")
                                .HasForeignKey("UserId");

                            b1.Navigation("User");
                        });

                    b.OwnsOne("Qydha.Domain.Entities.UserHandSettings", "UserHandSettings", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasColumnName("user_id");

                            b1.Property<int>("MaxLimit")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(0)
                                .HasColumnName("max_limit");

                            b1.Property<int>("PlayersCountInTeam")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(2)
                                .HasColumnName("players_count_in_team");

                            b1.Property<int>("RoundsCount")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(7)
                                .HasColumnName("rounds_count");

                            b1.Property<int>("TakweeshPoints")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(100)
                                .HasColumnName("takweesh_points");

                            b1.Property<int>("TeamsCount")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasDefaultValue(2)
                                .HasColumnName("teams_count");

                            b1.Property<bool>("WinUsingZat")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("boolean")
                                .HasDefaultValue(false)
                                .HasColumnName("win_using_zat");

                            b1.HasKey("UserId");

                            b1.ToTable("user_hand_settings", (string)null);

                            b1.WithOwner("User")
                                .HasForeignKey("UserId");

                            b1.Navigation("User");
                        });

                    b.Navigation("UserBalootSettings")
                        .IsRequired();

                    b.Navigation("UserGeneralSettings")
                        .IsRequired();

                    b.Navigation("UserHandSettings")
                        .IsRequired();
                });

            modelBuilder.Entity("Qydha.Domain.Entities.UserPromoCode", b =>
                {
                    b.HasOne("Qydha.Domain.Entities.User", "User")
                        .WithMany("UserPromoCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_codes");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Qydha.Domain.Entities.BalootGame", b =>
                {
                    b.Navigation("Sakkas");
                });

            modelBuilder.Entity("Qydha.Domain.Entities.BalootSakka", b =>
                {
                    b.Navigation("Moshtaras");
                });

            modelBuilder.Entity("Qydha.Domain.Entities.InfluencerCode", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Qydha.Domain.Entities.InfluencerCodeCategory", b =>
                {
                    b.Navigation("InfluencerCodes");
                });

            modelBuilder.Entity("Qydha.Domain.Entities.NotificationData", b =>
                {
                    b.Navigation("NotificationUserLinks");
                });

            modelBuilder.Entity("Qydha.Domain.Entities.User", b =>
                {
                    b.Navigation("CreatedBalootGames");

                    b.Navigation("InfluencerCodes");

                    b.Navigation("LoginWithQydhaRequests");

                    b.Navigation("ModeratedBalootGames");

                    b.Navigation("NotificationUserLinks");

                    b.Navigation("PhoneAuthenticationRequests");

                    b.Navigation("Purchases");

                    b.Navigation("UpdateEmailRequests");

                    b.Navigation("UpdatePhoneRequests");

                    b.Navigation("UserPromoCodes");
                });
#pragma warning restore 612, 618
        }
    }
}
